"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@humeai";
exports.ids = ["vendor-chunks/@humeai"];
exports.modules = {

/***/ "(ssr)/./node_modules/@humeai/voice-react/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@humeai/voice-react/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioEncoding: () => (/* reexport safe */ _humeai_voice__WEBPACK_IMPORTED_MODULE_0__.AudioEncoding),\n/* harmony export */   Channels: () => (/* reexport safe */ _humeai_voice__WEBPACK_IMPORTED_MODULE_0__.Channels),\n/* harmony export */   LanguageModelOption: () => (/* reexport safe */ _humeai_voice__WEBPACK_IMPORTED_MODULE_0__.LanguageModelOption),\n/* harmony export */   TTSService: () => (/* reexport safe */ _humeai_voice__WEBPACK_IMPORTED_MODULE_0__.TTSService),\n/* harmony export */   VoiceProvider: () => (/* binding */ VoiceProvider),\n/* harmony export */   VoiceReadyState: () => (/* binding */ VoiceReadyState),\n/* harmony export */   useMicrophone: () => (/* binding */ useMicrophone),\n/* harmony export */   useSoundPlayer: () => (/* binding */ useSoundPlayer),\n/* harmony export */   useVoice: () => (/* binding */ useVoice),\n/* harmony export */   useVoiceClient: () => (/* binding */ useVoiceClient)\n/* harmony export */ });\n/* harmony import */ var _humeai_voice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @humeai/voice */ \"(ssr)/./node_modules/@humeai/voice/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var meyda__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! meyda */ \"(ssr)/./node_modules/meyda/dist/node/main.js\");\n/* harmony import */ var _barrel_optimize_names_intervalToDuration_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=intervalToDuration!=!date-fns */ \"(ssr)/./node_modules/date-fns/intervalToDuration.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ AudioEncoding,Channels,LanguageModelOption,TTSService,VoiceProvider,VoiceReadyState,useMicrophone,useSoundPlayer,useVoice,useVoiceClient auto */ // src/lib/useSoundPlayer.ts\n\n\n// src/lib/convertFrequencyScale.ts\nvar barkCenterFrequencies = [\n    50,\n    150,\n    250,\n    350,\n    450,\n    570,\n    700,\n    840,\n    1e3,\n    1170,\n    1370,\n    1600,\n    1850,\n    2150,\n    2500,\n    2900,\n    3400,\n    4e3,\n    4800,\n    5800,\n    7e3,\n    8500,\n    10500,\n    13500\n];\nvar minValue = 0;\nvar maxValue = 255;\nfunction convertLinearFrequenciesToBark(linearData, sampleRate) {\n    const maxFrequency = sampleRate / 2;\n    const frequencyResolution = maxFrequency / linearData.length;\n    const barkFrequencies = barkCenterFrequencies.map((barkFreq)=>{\n        const linearDataIndex = Math.round(barkFreq / frequencyResolution);\n        if (linearDataIndex >= 0 && linearDataIndex < linearData.length) {\n            return ((linearData[linearDataIndex] ?? 0) - minValue) / (maxValue - minValue) * 2;\n        } else {\n            return 0;\n        }\n    });\n    return barkFrequencies;\n}\n// src/lib/generateEmptyFft.ts\nfunction generateEmptyFft() {\n    return Array.from({\n        length: 24\n    }).map(()=>0);\n}\n// src/lib/useSoundPlayer.ts\nvar useSoundPlayer = (props)=>{\n    const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isAudioMuted, setIsAudioMuted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [fft, setFft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(generateEmptyFft());\n    const audioContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const analyserNode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const gainNode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isInitialized = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const clipQueue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const isProcessing = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const currentlyPlayingAudioBuffer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const frequencyDataIntervalId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const onPlayAudio = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(props.onPlayAudio);\n    onPlayAudio.current = props.onPlayAudio;\n    const onError = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(props.onError);\n    onError.current = props.onError;\n    const playNextClip = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (analyserNode.current === null || audioContext.current === null) {\n            onError.current(\"Audio environment is not initialized\");\n            return;\n        }\n        if (clipQueue.current.length === 0 || isProcessing.current) {\n            return;\n        }\n        const nextClip = clipQueue.current.shift();\n        if (!nextClip) return;\n        isProcessing.current = true;\n        setIsPlaying(true);\n        const bufferSource = audioContext.current.createBufferSource();\n        bufferSource.buffer = nextClip.buffer;\n        bufferSource.connect(analyserNode.current);\n        currentlyPlayingAudioBuffer.current = bufferSource;\n        const updateFrequencyData = ()=>{\n            try {\n                const bufferSampleRate = bufferSource.buffer?.sampleRate;\n                if (!analyserNode.current || typeof bufferSampleRate === \"undefined\") return;\n                const dataArray = new Uint8Array(analyserNode.current.frequencyBinCount);\n                analyserNode.current.getByteFrequencyData(dataArray);\n                const barkFrequencies = convertLinearFrequenciesToBark(dataArray, bufferSampleRate);\n                setFft(()=>barkFrequencies);\n            } catch (e) {\n                setFft(generateEmptyFft());\n            }\n        };\n        frequencyDataIntervalId.current = window.setInterval(updateFrequencyData, 5);\n        bufferSource.start(0);\n        onPlayAudio.current(nextClip.id);\n        bufferSource.onended = ()=>{\n            if (frequencyDataIntervalId.current) {\n                clearInterval(frequencyDataIntervalId.current);\n            }\n            setFft(generateEmptyFft());\n            bufferSource.disconnect();\n            isProcessing.current = false;\n            setIsPlaying(false);\n            currentlyPlayingAudioBuffer.current = null;\n            playNextClip();\n        };\n    }, []);\n    const initPlayer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const initAudioContext = new AudioContext();\n        audioContext.current = initAudioContext;\n        const analyser = initAudioContext.createAnalyser();\n        const gain = initAudioContext.createGain();\n        analyser.fftSize = 2048;\n        analyser.connect(gain);\n        gain.connect(initAudioContext.destination);\n        analyserNode.current = analyser;\n        gainNode.current = gain;\n        isInitialized.current = true;\n    }, []);\n    const addToQueue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (message)=>{\n        if (!isInitialized.current || !audioContext.current) {\n            onError.current(\"Audio player has not been initialized\");\n            return;\n        }\n        try {\n            const blob = (0,_humeai_voice__WEBPACK_IMPORTED_MODULE_0__.base64ToBlob)(message.data, \"audio/mp3\");\n            const arrayBuffer = await blob.arrayBuffer();\n            const audioBuffer = await audioContext.current.decodeAudioData(arrayBuffer);\n            clipQueue.current.push({\n                id: message.id,\n                buffer: audioBuffer\n            });\n            if (clipQueue.current.length === 1) {\n                playNextClip();\n            }\n        } catch (e) {\n            const eMessage = e instanceof Error ? e.message : \"Unknown error\";\n            onError.current(`Failed to add clip to queue: ${eMessage}`);\n        }\n    }, [\n        playNextClip\n    ]);\n    const stopAll = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        isInitialized.current = false;\n        isProcessing.current = false;\n        setIsPlaying(false);\n        if (frequencyDataIntervalId.current) {\n            window.clearInterval(frequencyDataIntervalId.current);\n        }\n        if (currentlyPlayingAudioBuffer.current) {\n            currentlyPlayingAudioBuffer.current.disconnect();\n            currentlyPlayingAudioBuffer.current = null;\n        }\n        if (analyserNode.current) {\n            analyserNode.current.disconnect();\n            analyserNode.current = null;\n        }\n        if (audioContext.current) {\n            void audioContext.current.close().then(()=>{\n                audioContext.current = null;\n            }).catch(()=>{\n                return null;\n            });\n        }\n        clipQueue.current = [];\n        setFft(generateEmptyFft());\n    }, []);\n    const clearQueue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (currentlyPlayingAudioBuffer.current) {\n            currentlyPlayingAudioBuffer.current.stop();\n            currentlyPlayingAudioBuffer.current = null;\n        }\n        clipQueue.current = [];\n        isProcessing.current = false;\n        setIsPlaying(false);\n        setFft(generateEmptyFft());\n    }, []);\n    const muteAudio = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (gainNode.current && audioContext.current) {\n            gainNode.current.gain.setValueAtTime(0, audioContext.current.currentTime);\n            setIsAudioMuted(true);\n        }\n    }, []);\n    const unmuteAudio = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (gainNode.current && audioContext.current) {\n            gainNode.current.gain.setValueAtTime(1, audioContext.current.currentTime);\n            setIsAudioMuted(false);\n        }\n    }, []);\n    return {\n        addToQueue,\n        fft,\n        initPlayer,\n        isPlaying,\n        isAudioMuted,\n        muteAudio,\n        unmuteAudio,\n        stopAll,\n        clearQueue\n    };\n};\n// src/lib/useMicrophone.ts\n\n\n\nvar useMicrophone = (props)=>{\n    const { streamRef, onAudioCaptured, onError } = props;\n    const [isMuted, setIsMuted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const isMutedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(isMuted);\n    const [fft, setFft] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(generateEmptyFft());\n    const currentAnalyzer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mimeTypeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const audioContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const recorder = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const sendAudio = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(onAudioCaptured);\n    sendAudio.current = onAudioCaptured;\n    const dataHandler = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event)=>{\n        const blob = event.data;\n        blob.arrayBuffer().then((buffer)=>{\n            if (buffer.byteLength > 0) {\n                sendAudio.current?.(buffer);\n            }\n        }).catch((err)=>{\n            console.log(err);\n        });\n    }, []);\n    const start = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        const stream = streamRef.current;\n        if (!stream) {\n            throw new Error(\"No stream connected\");\n        }\n        const context = new AudioContext();\n        audioContext.current = context;\n        const input = context.createMediaStreamSource(stream);\n        try {\n            currentAnalyzer.current = meyda__WEBPACK_IMPORTED_MODULE_2__.createMeydaAnalyzer({\n                audioContext: context,\n                source: input,\n                featureExtractors: [\n                    \"loudness\"\n                ],\n                callback: (features)=>{\n                    const newFft = features.loudness.specific || [];\n                    setFft(()=>Array.from(newFft));\n                }\n            });\n            currentAnalyzer.current.start();\n        } catch (e) {\n            const message = e instanceof Error ? e.message : \"Unknown error\";\n            console.error(`Failed to start mic analyzer: ${message}`);\n        }\n        const mimeType = mimeTypeRef.current;\n        if (!mimeType) {\n            throw new Error(\"No MimeType specified\");\n        }\n        recorder.current = new MediaRecorder(stream, {\n            mimeType\n        });\n        recorder.current.addEventListener(\"dataavailable\", dataHandler);\n        recorder.current.start(100);\n    }, [\n        dataHandler,\n        streamRef,\n        mimeTypeRef\n    ]);\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        try {\n            if (currentAnalyzer.current) {\n                currentAnalyzer.current.stop();\n                currentAnalyzer.current = null;\n            }\n            if (audioContext.current) {\n                void audioContext.current.close().then(()=>{\n                    audioContext.current = null;\n                }).catch(()=>{\n                    return null;\n                });\n            }\n            recorder.current?.stop();\n            recorder.current?.removeEventListener(\"dataavailable\", dataHandler);\n            recorder.current = null;\n            streamRef.current?.getTracks().forEach((track)=>track.stop());\n            setIsMuted(false);\n        } catch (e) {\n            const message = e instanceof Error ? e.message : \"Unknown error\";\n            onError(`Error stopping microphone: ${message}`);\n            console.log(e);\n        }\n    }, [\n        dataHandler,\n        onError,\n        streamRef\n    ]);\n    const mute = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (currentAnalyzer.current) {\n            currentAnalyzer.current.stop();\n            setFft(generateEmptyFft());\n        }\n        streamRef.current?.getTracks().forEach((track)=>{\n            track.enabled = false;\n        });\n        isMutedRef.current = true;\n        setIsMuted(true);\n    }, [\n        streamRef\n    ]);\n    const unmute = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (currentAnalyzer.current) {\n            currentAnalyzer.current.start();\n        }\n        streamRef.current?.getTracks().forEach((track)=>{\n            track.enabled = true;\n        });\n        isMutedRef.current = false;\n        setIsMuted(false);\n    }, [\n        streamRef\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        return ()=>{\n            try {\n                recorder.current?.stop();\n                recorder.current?.removeEventListener(\"dataavailable\", dataHandler);\n                if (currentAnalyzer.current) {\n                    currentAnalyzer.current.stop();\n                    currentAnalyzer.current = null;\n                }\n                streamRef.current?.getTracks().forEach((track)=>track.stop());\n                streamRef.current = null;\n            } catch (e) {\n                console.log(e);\n            }\n        };\n    }, [\n        dataHandler,\n        streamRef\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const mimeTypeResult = (0,_humeai_voice__WEBPACK_IMPORTED_MODULE_0__.getSupportedMimeType)();\n        if (mimeTypeResult.success) {\n            mimeTypeRef.current = mimeTypeResult.mimeType;\n        } else {\n            onError(mimeTypeResult.error.message);\n        }\n    }, [\n        onError\n    ]);\n    return {\n        start,\n        stop,\n        mute,\n        unmute,\n        isMuted,\n        fft\n    };\n};\n// src/lib/VoiceProvider.tsx\n\n\n// src/lib/noop.ts\nvar noop = ()=>{};\n// src/lib/useCallDuration.ts\n\n\nvar useCallDuration = ()=>{\n    const interval = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const startTime = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [timestamp, setTimestamp] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const start = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        startTime.current = Date.now();\n        setTimestamp(\"00:00:00\");\n        interval.current = window.setInterval(()=>{\n            if (startTime.current) {\n                const duration = (0,_barrel_optimize_names_intervalToDuration_date_fns__WEBPACK_IMPORTED_MODULE_3__.intervalToDuration)({\n                    start: startTime.current,\n                    end: Date.now()\n                });\n                const hours = (duration.hours ?? 0).toString().padStart(2, \"0\");\n                const minutes = (duration.minutes ?? 0).toString().padStart(2, \"0\");\n                const seconds = (duration.seconds ?? 0).toString().padStart(2, \"0\");\n                setTimestamp(`${hours}:${minutes}:${seconds}`);\n            }\n        }, 500);\n    }, []);\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (interval.current) {\n            window.clearInterval(interval.current);\n            interval.current = null;\n        }\n    }, []);\n    const reset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setTimestamp(null);\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        return ()=>{\n            if (interval.current) {\n                window.clearInterval(interval.current);\n                interval.current = null;\n            }\n        };\n    }, []);\n    return {\n        timestamp,\n        start,\n        stop,\n        reset\n    };\n};\n// src/lib/useEncoding.ts\n\n\nvar useEncoding = ()=>{\n    const [permission, setPermission] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"prompt\");\n    const streamRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const getStream = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        try {\n            const stream = await (0,_humeai_voice__WEBPACK_IMPORTED_MODULE_0__.getAudioStream)();\n            setPermission(\"granted\");\n            streamRef.current = stream;\n            (0,_humeai_voice__WEBPACK_IMPORTED_MODULE_0__.checkForAudioTracks)(stream);\n            return \"granted\";\n        } catch (e) {\n            setPermission(\"denied\");\n            return \"denied\";\n        }\n    }, []);\n    return {\n        streamRef,\n        getStream,\n        permission\n    };\n};\n// src/lib/useMessages.ts\n\n// src/utils/index.ts\nvar keepLastN = (n, arr)=>{\n    if (arr.length <= n) {\n        return arr;\n    }\n    return arr.slice(arr.length - n);\n};\n// src/lib/useMessages.ts\nvar useMessages = ({ sendMessageToParent, messageHistoryLimit })=>{\n    const [voiceMessageMap, setVoiceMessageMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [lastVoiceMessage, setLastVoiceMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [lastUserMessage, setLastUserMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [chatMetadata, setChatMetadata] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const createConnectMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setMessages((prev)=>prev.concat([\n                {\n                    type: \"socket_connected\",\n                    receivedAt: /* @__PURE__ */ new Date()\n                }\n            ]));\n    }, []);\n    const createDisconnectMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setMessages((prev)=>prev.concat([\n                {\n                    type: \"socket_disconnected\",\n                    receivedAt: /* @__PURE__ */ new Date()\n                }\n            ]));\n    }, []);\n    const onMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message)=>{\n        switch(message.type){\n            case \"assistant_message\":\n                setVoiceMessageMap((prev)=>({\n                        ...prev,\n                        [message.id]: message\n                    }));\n                break;\n            case \"user_message\":\n                sendMessageToParent?.(message);\n                setLastUserMessage(message);\n                setMessages((prev)=>{\n                    return keepLastN(messageHistoryLimit, prev.concat([\n                        message\n                    ]));\n                });\n                break;\n            case \"user_interruption\":\n            case \"error\":\n            case \"tool_call\":\n            case \"tool_response\":\n            case \"tool_error\":\n                sendMessageToParent?.(message);\n                setMessages((prev)=>{\n                    return keepLastN(messageHistoryLimit, prev.concat([\n                        message\n                    ]));\n                });\n                break;\n            case \"chat_metadata\":\n                sendMessageToParent?.(message);\n                setMessages((prev)=>{\n                    return keepLastN(messageHistoryLimit, prev.concat([\n                        message\n                    ]));\n                });\n                setChatMetadata(message);\n                break;\n            default:\n                break;\n        }\n    }, []);\n    const onPlayAudio = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((id)=>{\n        const matchingTranscript = voiceMessageMap[id];\n        if (matchingTranscript) {\n            sendMessageToParent?.(matchingTranscript);\n            setLastVoiceMessage(matchingTranscript);\n            setMessages((prev)=>{\n                return keepLastN(messageHistoryLimit, prev.concat([\n                    matchingTranscript\n                ]));\n            });\n            setVoiceMessageMap((prev)=>{\n                const newMap = {\n                    ...prev\n                };\n                delete newMap[id];\n                return newMap;\n            });\n        }\n    }, [\n        voiceMessageMap,\n        sendMessageToParent,\n        messageHistoryLimit\n    ]);\n    const clearMessages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setMessages([]);\n        setLastVoiceMessage(null);\n        setLastUserMessage(null);\n        setVoiceMessageMap({});\n    }, []);\n    return {\n        createConnectMessage,\n        createDisconnectMessage,\n        onMessage,\n        onPlayAudio,\n        clearMessages,\n        messages,\n        lastVoiceMessage,\n        lastUserMessage,\n        chatMetadata\n    };\n};\n// src/lib/useToolStatus.ts\n\nvar useToolStatus = ()=>{\n    const [store, setStore] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const addToStore = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message)=>{\n        setStore((prev)=>{\n            const entry = {\n                ...prev[message.tool_call_id]\n            };\n            if (message.type === \"tool_call\") {\n                entry.call = message;\n            }\n            if (message.type === \"tool_response\" || message.type === \"tool_error\") {\n                entry.resolved = message;\n            }\n            return {\n                ...prev,\n                [message.tool_call_id]: entry\n            };\n        });\n    }, []);\n    const clearStore = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setStore({});\n    }, []);\n    return {\n        store,\n        addToStore,\n        clearStore\n    };\n};\n// src/lib/useVoiceClient.ts\n\n\n\nvar VoiceReadyState = /* @__PURE__ */ ((VoiceReadyState2)=>{\n    VoiceReadyState2[\"IDLE\"] = \"idle\";\n    VoiceReadyState2[\"CONNECTING\"] = \"connecting\";\n    VoiceReadyState2[\"OPEN\"] = \"open\";\n    VoiceReadyState2[\"CLOSED\"] = \"closed\";\n    return VoiceReadyState2;\n})(VoiceReadyState || {});\nvar useVoiceClient = (props)=>{\n    const client = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [readyState, setReadyState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"idle\" /* IDLE */ );\n    const onAudioMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(props.onAudioMessage);\n    onAudioMessage.current = props.onAudioMessage;\n    const onMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(props.onMessage);\n    onMessage.current = props.onMessage;\n    const onToolCall = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(props.onToolCall);\n    onToolCall.current = props.onToolCall;\n    const onError = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(props.onError);\n    onError.current = props.onError;\n    const onOpen = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(props.onOpen);\n    onOpen.current = props.onOpen;\n    const onClose = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(props.onClose);\n    onClose.current = props.onClose;\n    const connect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((config)=>{\n        return new Promise((resolve, reject)=>{\n            client.current = _humeai_voice__WEBPACK_IMPORTED_MODULE_0__.VoiceClient.create(config);\n            client.current.on(\"open\", ()=>{\n                onOpen.current?.();\n                setReadyState(\"open\" /* OPEN */ );\n                resolve(\"open\" /* OPEN */ );\n            });\n            client.current.on(\"message\", (message)=>{\n                if (message.type === \"audio_output\") {\n                    onAudioMessage.current?.(message);\n                }\n                if (message.type === \"assistant_message\" || message.type === \"user_message\" || message.type === \"user_interruption\" || message.type === \"error\" || message.type === \"tool_response\" || message.type === \"tool_error\" || message.type === \"chat_metadata\") {\n                    onMessage.current?.(message);\n                }\n                if (message.type === \"tool_call\") {\n                    onMessage.current?.(message);\n                    void onToolCall.current?.(message, {\n                        success: (content)=>({\n                                type: \"tool_response\",\n                                tool_call_id: message.tool_call_id,\n                                content: JSON.stringify(content)\n                            }),\n                        error: ({ error, code, level, content })=>({\n                                type: \"tool_error\",\n                                tool_call_id: message.tool_call_id,\n                                error,\n                                code,\n                                level,\n                                content\n                            })\n                    }).then((response)=>{\n                        const parsed = zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n                            _humeai_voice__WEBPACK_IMPORTED_MODULE_0__.ToolResponseSchema,\n                            _humeai_voice__WEBPACK_IMPORTED_MODULE_0__.ToolErrorSchema\n                        ]).safeParse(response);\n                        if (parsed.success) {\n                            client.current?.sendToolMessage(parsed.data);\n                        } else {\n                            onError.current?.(\"Invalid response from tool call\");\n                        }\n                    });\n                }\n            });\n            client.current.on(\"close\", (event)=>{\n                onClose.current?.(event);\n                setReadyState(\"closed\" /* CLOSED */ );\n            });\n            client.current.on(\"error\", (e)=>{\n                const message = e instanceof Error ? e.message : \"Unknown error\";\n                onError.current?.(message, e instanceof Error ? e : void 0);\n                reject(e);\n            });\n            setReadyState(\"connecting\" /* CONNECTING */ );\n            client.current.connect();\n        });\n    }, []);\n    const disconnect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setReadyState(\"idle\" /* IDLE */ );\n        client.current?.disconnect();\n    }, []);\n    const sendSessionSettings = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((sessionSettings)=>{\n        client.current?.sendSessionSettings(sessionSettings);\n    }, []);\n    const sendAudio = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((arrayBuffer)=>{\n        client.current?.sendAudio(arrayBuffer);\n    }, []);\n    const sendUserInput = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((text)=>{\n        client.current?.sendUserInput(text);\n    }, []);\n    const sendAssistantInput = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((text)=>{\n        client.current?.sendAssistantInput(text);\n    }, []);\n    const sendToolMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((toolMessage)=>{\n        client.current?.sendToolMessage(toolMessage);\n    }, []);\n    const sendPauseAssistantMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        client.current?.sendPauseAssistantMessage();\n    }, []);\n    const sendResumeAssistantMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        client.current?.sendResumeAssistantMessage();\n    }, []);\n    return {\n        readyState,\n        sendSessionSettings,\n        sendAudio,\n        connect,\n        disconnect,\n        sendUserInput,\n        sendAssistantInput,\n        sendToolMessage,\n        sendPauseAssistantMessage,\n        sendResumeAssistantMessage\n    };\n};\n// src/lib/VoiceProvider.tsx\n\nvar VoiceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nvar useVoice = ()=>{\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(VoiceContext);\n    if (!ctx) {\n        throw new Error(\"useVoice must be used within an VoiceProvider\");\n    }\n    return ctx;\n};\nvar VoiceProvider = ({ children, clearMessagesOnDisconnect = true, messageHistoryLimit = 100, sessionSettings, ...props })=>{\n    const { timestamp: callDurationTimestamp, start: startTimer, stop: stopTimer } = useCallDuration();\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        value: \"disconnected\"\n    });\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const isError = error !== null;\n    const isMicrophoneError = error?.type === \"mic_error\";\n    const isSocketError = error?.type === \"socket_error\";\n    const isAudioError = error?.type === \"audio_error\";\n    const onError = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(props.onError ?? noop);\n    onError.current = props.onError ?? noop;\n    const onClose = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(props.onClose ?? noop);\n    onClose.current = props.onClose ?? noop;\n    const toolStatus = useToolStatus();\n    const messageStore = useMessages({\n        sendMessageToParent: props.onMessage,\n        messageHistoryLimit\n    });\n    const updateError = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((err)=>{\n        setError(err);\n        if (err !== null) {\n            onError.current?.(err);\n        }\n    }, []);\n    const onClientError = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message, err)=>{\n        stopTimer();\n        updateError({\n            type: \"socket_error\",\n            message,\n            error: err\n        });\n    }, [\n        stopTimer,\n        updateError\n    ]);\n    const config = (0,_humeai_voice__WEBPACK_IMPORTED_MODULE_0__.createSocketConfig)(props);\n    const player = useSoundPlayer({\n        onError: (message)=>{\n            updateError({\n                type: \"audio_error\",\n                message\n            });\n        },\n        onPlayAudio: (id)=>{\n            messageStore.onPlayAudio(id);\n        }\n    });\n    const { streamRef, getStream, permission: micPermission } = useEncoding();\n    const client = useVoiceClient({\n        onAudioMessage: (message)=>{\n            player.addToQueue(message);\n        },\n        onMessage: (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message)=>{\n            messageStore.onMessage(message);\n            if (message.type === \"user_interruption\" || message.type === \"user_message\") {\n                player.clearQueue();\n            }\n            if (message.type === \"tool_call\" || message.type === \"tool_response\" || message.type === \"tool_error\") {\n                toolStatus.addToStore(message);\n            }\n        }, [\n            messageStore,\n            player,\n            toolStatus\n        ]),\n        onError: onClientError,\n        onOpen: (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n            startTimer();\n            messageStore.createConnectMessage();\n            props.onOpen?.();\n        }, [\n            messageStore,\n            props,\n            startTimer\n        ]),\n        onClose: (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event)=>{\n            stopTimer();\n            messageStore.createDisconnectMessage();\n            onClose.current?.(event);\n        }, [\n            messageStore,\n            stopTimer\n        ]),\n        onToolCall: props.onToolCall\n    });\n    const mic = useMicrophone({\n        streamRef,\n        onAudioCaptured: (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((arrayBuffer)=>{\n            try {\n                client.sendAudio(arrayBuffer);\n            } catch (e) {\n                const message = e instanceof Error ? e.message : \"Unknown error\";\n                updateError({\n                    type: \"socket_error\",\n                    message\n                });\n            }\n        }, []),\n        onError: (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message)=>{\n            updateError({\n                type: \"mic_error\",\n                message\n            });\n        }, [\n            updateError\n        ])\n    });\n    const connect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        updateError(null);\n        setStatus({\n            value: \"connecting\"\n        });\n        const permission = await getStream();\n        if (permission === \"denied\") {\n            const error2 = {\n                type: \"mic_error\",\n                message: \"Microphone permission denied\"\n            };\n            updateError(error2);\n            return Promise.reject(error2);\n        }\n        try {\n            await client.connect({\n                ...config\n            }).then(()=>{\n                if (sessionSettings !== void 0 && Object.keys(sessionSettings).length > 0) {\n                    client.sendSessionSettings(sessionSettings);\n                }\n            });\n        } catch (e) {\n            const error2 = {\n                type: \"socket_error\",\n                message: \"We could not connect to the voice. Please try again.\"\n            };\n            updateError(error2);\n            return Promise.reject(error2);\n        }\n        try {\n            const [micPromise, playerPromise] = await Promise.allSettled([\n                mic.start(),\n                player.initPlayer()\n            ]);\n            if (micPromise.status === \"fulfilled\" && playerPromise.status === \"fulfilled\") {\n                setStatus({\n                    value: \"connected\"\n                });\n            }\n        } catch (e) {\n            const error2 = {\n                type: \"audio_error\",\n                message: e instanceof Error ? e.message : \"We could not connect to audio. Please try again.\"\n            };\n            updateError(error2);\n        }\n    }, [\n        client,\n        config,\n        getStream,\n        mic,\n        player,\n        sessionSettings,\n        updateError\n    ]);\n    const disconnectFromVoice = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        client.disconnect();\n        player.stopAll();\n        mic.stop();\n        if (clearMessagesOnDisconnect) {\n            messageStore.clearMessages();\n        }\n        toolStatus.clearStore();\n    }, [\n        client,\n        player,\n        mic,\n        clearMessagesOnDisconnect,\n        toolStatus,\n        messageStore\n    ]);\n    const disconnect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((disconnectOnError)=>{\n        if (micPermission === \"denied\") {\n            setStatus({\n                value: \"error\",\n                reason: \"Microphone permission denied\"\n            });\n        }\n        stopTimer();\n        disconnectFromVoice();\n        if (status.value !== \"error\" && !disconnectOnError) {\n            setStatus({\n                value: \"disconnected\"\n            });\n        }\n    }, [\n        micPermission,\n        stopTimer,\n        disconnectFromVoice,\n        status.value\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (error !== null && status.value !== \"error\" && status.value !== \"disconnected\") {\n            setStatus({\n                value: \"error\",\n                reason: error.message\n            });\n            disconnectFromVoice();\n        }\n    }, [\n        status.value,\n        disconnect,\n        disconnectFromVoice,\n        error\n    ]);\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            connect,\n            disconnect,\n            fft: player.fft,\n            micFft: mic.fft,\n            isMuted: mic.isMuted,\n            isAudioMuted: player.isAudioMuted,\n            isPlaying: player.isPlaying,\n            messages: messageStore.messages,\n            lastVoiceMessage: messageStore.lastVoiceMessage,\n            lastUserMessage: messageStore.lastUserMessage,\n            clearMessages: messageStore.clearMessages,\n            mute: mic.mute,\n            muteAudio: player.muteAudio,\n            readyState: client.readyState,\n            sendUserInput: client.sendUserInput,\n            sendAssistantInput: client.sendAssistantInput,\n            sendSessionSettings: client.sendSessionSettings,\n            sendToolMessage: client.sendToolMessage,\n            sendPauseAssistantMessage: client.sendPauseAssistantMessage,\n            sendResumeAssistantMessage: client.sendResumeAssistantMessage,\n            status,\n            unmute: mic.unmute,\n            unmuteAudio: player.unmuteAudio,\n            error,\n            isAudioError,\n            isError,\n            isMicrophoneError,\n            isSocketError,\n            callDurationTimestamp,\n            toolStatusStore: toolStatus.store,\n            chatMetadata: messageStore.chatMetadata\n        }), [\n        connect,\n        disconnect,\n        player.fft,\n        player.isPlaying,\n        player.isAudioMuted,\n        player.muteAudio,\n        player.unmuteAudio,\n        mic.fft,\n        mic.isMuted,\n        mic.mute,\n        mic.unmute,\n        messageStore.messages,\n        messageStore.lastVoiceMessage,\n        messageStore.lastUserMessage,\n        messageStore.clearMessages,\n        client.readyState,\n        client.sendUserInput,\n        client.sendAssistantInput,\n        client.sendSessionSettings,\n        client.sendToolMessage,\n        client.sendPauseAssistantMessage,\n        client.sendResumeAssistantMessage,\n        status,\n        error,\n        isAudioError,\n        isError,\n        isMicrophoneError,\n        isSocketError,\n        callDurationTimestamp,\n        toolStatus,\n        messageStore.chatMetadata\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(VoiceContext.Provider, {\n        value: ctx,\n        children\n    });\n};\n// src/index.ts\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@humeai/voice-react/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@humeai/voice/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@humeai/voice/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistantEndMessageSchema: () => (/* binding */ AssistantEndMessageSchema),\n/* harmony export */   AssistantTranscriptMessageSchema: () => (/* binding */ AssistantTranscriptMessageSchema),\n/* harmony export */   AudioEncoding: () => (/* binding */ AudioEncoding),\n/* harmony export */   AudioMessageSchema: () => (/* binding */ AudioMessageSchema),\n/* harmony export */   AudioOutputMessageSchema: () => (/* binding */ AudioOutputMessageSchema),\n/* harmony export */   AuthStrategySchema: () => (/* binding */ AuthStrategySchema),\n/* harmony export */   Channels: () => (/* binding */ Channels),\n/* harmony export */   ChatMetadataMessageSchema: () => (/* binding */ ChatMetadataMessageSchema),\n/* harmony export */   EmotionScoresSchema: () => (/* binding */ EmotionScoresSchema),\n/* harmony export */   JSONErrorMessageSchema: () => (/* binding */ JSONErrorMessageSchema),\n/* harmony export */   JSONMessageSchema: () => (/* binding */ JSONMessageSchema),\n/* harmony export */   LanguageModelOption: () => (/* binding */ LanguageModelOption),\n/* harmony export */   MimeType: () => (/* binding */ MimeType),\n/* harmony export */   SessionSettingsSchema: () => (/* binding */ SessionSettingsSchema),\n/* harmony export */   SocketConfigSchema: () => (/* binding */ SocketConfigSchema),\n/* harmony export */   SocketFailedToParseMessageError: () => (/* binding */ SocketFailedToParseMessageError),\n/* harmony export */   SocketUnknownMessageError: () => (/* binding */ SocketUnknownMessageError),\n/* harmony export */   TTSService: () => (/* binding */ TTSService),\n/* harmony export */   TimeSliceSchema: () => (/* binding */ TimeSliceSchema),\n/* harmony export */   ToolCallSchema: () => (/* binding */ ToolCallSchema),\n/* harmony export */   ToolErrorSchema: () => (/* binding */ ToolErrorSchema),\n/* harmony export */   ToolResponseContentSchema: () => (/* binding */ ToolResponseContentSchema),\n/* harmony export */   ToolResponseSchema: () => (/* binding */ ToolResponseSchema),\n/* harmony export */   TranscriptModelsSchema: () => (/* binding */ TranscriptModelsSchema),\n/* harmony export */   UserInterruptionMessageSchema: () => (/* binding */ UserInterruptionMessageSchema),\n/* harmony export */   UserTranscriptMessageSchema: () => (/* binding */ UserTranscriptMessageSchema),\n/* harmony export */   VoiceClient: () => (/* binding */ VoiceClient),\n/* harmony export */   WebSearchToolSchema: () => (/* binding */ WebSearchToolSchema),\n/* harmony export */   arrayBufferToBlob: () => (/* binding */ arrayBufferToBlob),\n/* harmony export */   base64ToBlob: () => (/* binding */ base64ToBlob),\n/* harmony export */   checkForAudioTracks: () => (/* binding */ checkForAudioTracks),\n/* harmony export */   createSocketConfig: () => (/* binding */ createSocketConfig),\n/* harmony export */   createSocketUrl: () => (/* binding */ createSocketUrl),\n/* harmony export */   defaultConfig: () => (/* binding */ defaultConfig),\n/* harmony export */   fetchAccessToken: () => (/* binding */ fetchAccessToken),\n/* harmony export */   getAudioStream: () => (/* binding */ getAudioStream),\n/* harmony export */   getSupportedMimeType: () => (/* binding */ getSupportedMimeType),\n/* harmony export */   isSocketFailedToParseMessageError: () => (/* binding */ isSocketFailedToParseMessageError),\n/* harmony export */   isSocketUnknownMessageError: () => (/* binding */ isSocketUnknownMessageError),\n/* harmony export */   parseAudioMessage: () => (/* binding */ parseAudioMessage),\n/* harmony export */   parseMessageData: () => (/* binding */ parseMessageData),\n/* harmony export */   parseMessageType: () => (/* binding */ parseMessageType)\n/* harmony export */ });\n/* harmony import */ var reconnecting_websocket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! reconnecting-websocket */ \"(ssr)/./node_modules/reconnecting-websocket/dist/reconnecting-websocket-mjs.js\");\n/* harmony import */ var snakecase_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! snakecase-keys */ \"(ssr)/./node_modules/snakecase-keys/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/lib/index.mjs\");\n// src/lib/audio.ts\nvar MimeType = /* @__PURE__ */ ((MimeType2) => {\n  MimeType2[\"WEBM\"] = \"audio/webm\";\n  MimeType2[\"MP4\"] = \"audio/mp4\";\n  MimeType2[\"WAV\"] = \"audio/wav\";\n  return MimeType2;\n})(MimeType || {});\nfunction arrayBufferToBlob(arrayBuffer, mimeType) {\n  return new Blob([arrayBuffer], { type: mimeType });\n}\nfunction base64ToBlob(base64, contentType) {\n  const binaryString = window.atob(base64);\n  const bytes = new Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  const byteArray = new Uint8Array(bytes);\n  return new Blob([byteArray], { type: contentType });\n}\nfunction getSupportedMimeType() {\n  if (typeof MediaRecorder === \"undefined\") {\n    return {\n      success: false,\n      error: new Error(\"MediaRecorder is not supported\")\n    };\n  }\n  if (MediaRecorder.isTypeSupported(\"audio/webm\" /* WEBM */)) {\n    return { success: true, mimeType: \"audio/webm\" /* WEBM */ };\n  }\n  if (MediaRecorder.isTypeSupported(\"audio/mp4\" /* MP4 */)) {\n    return { success: true, mimeType: \"audio/mp4\" /* MP4 */ };\n  }\n  if (MediaRecorder.isTypeSupported(\"audio/wav\" /* WAV */)) {\n    return { success: true, mimeType: \"audio/wav\" /* WAV */ };\n  }\n  return {\n    success: false,\n    error: new Error(\"Browser does not support any compatible mime types\")\n  };\n}\n\n// src/lib/client.ts\n\n\n\n// src/lib/create-url.ts\nvar createSocketUrl = (config) => {\n  const url = new URL(`wss://${config.hostname}`);\n  url.pathname = \"/v0/evi/chat\";\n  if (config.auth.type === \"accessToken\") {\n    url.searchParams.set(\"accessToken\", config.auth.value);\n  } else if (config.auth.type === \"apiKey\") {\n    url.searchParams.set(\"apiKey\", config.auth.value);\n  }\n  if (config.configId) {\n    url.searchParams.set(\"config_id\", config.configId);\n  }\n  if (config.configVersion) {\n    url.searchParams.set(\"config_version\", String(config.configVersion));\n  }\n  if (config.resumedChatGroupId) {\n    url.searchParams.set(\n      \"resumed_chat_group_id\",\n      String(config.resumedChatGroupId)\n    );\n  }\n  return url.href;\n};\n\n// src/lib/errors.ts\nvar SocketUnknownMessageError = class extends Error {\n  constructor(message) {\n    super(`Unknown message type.${message ? \" \" + message : \"\"}`);\n    this.name = \"SocketUnknownMessageError\";\n  }\n};\nvar isSocketUnknownMessageError = (err) => {\n  return err instanceof SocketUnknownMessageError;\n};\nvar SocketFailedToParseMessageError = class extends Error {\n  constructor(message) {\n    super(\n      `Failed to parse message from socket.${message ? \" \" + message : \"\"}`\n    );\n    this.name = \"SocketFailedToParseMessageError\";\n  }\n};\nvar isSocketFailedToParseMessageError = (err) => {\n  return err instanceof SocketFailedToParseMessageError;\n};\n\n// src/models/audio-message.ts\n\nvar AudioMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"audio\"),\n  data: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"instanceof\"](ArrayBuffer)\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\nvar parseAudioMessage = async (blob) => {\n  return blob.arrayBuffer().then((buffer) => {\n    return {\n      type: \"audio\",\n      data: buffer,\n      receivedAt: /* @__PURE__ */ new Date()\n    };\n  }).catch(() => {\n    return null;\n  });\n};\n\n// src/models/json-message.ts\n\n\n// src/models/assistant-end-message.ts\n\nvar AssistantEndMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"assistant_end\")\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/assistant-message.ts\n\n\n// src/models/transcript-models.ts\n\nvar EmotionScoresSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].record(zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number());\nvar TranscriptModelsSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  // prosody scores are null when the message is not audio\n  // (e.g. text input from the user)\n  prosody: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    scores: EmotionScoresSchema\n  }).nullish(),\n  time: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    begin: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number(),\n    end: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number()\n  }).nullish()\n});\n\n// src/models/assistant-message.ts\nvar AssistantTranscriptMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"assistant_message\"),\n  id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  message: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    role: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"assistant\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string()\n  }),\n  models: TranscriptModelsSchema,\n  from_text: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].boolean().catch(false)\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/audio-output-message.ts\n\nvar AudioOutputMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"audio_output\"),\n  id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  data: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/chat-metadata-message.ts\n\nvar ChatMetadataMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"chat_metadata\"),\n  chat_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  chat_group_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  request_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string()\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/error-message.ts\n\nvar JSONErrorMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"error\"),\n  code: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  slug: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  message: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/tool-messages.ts\n\nvar literalSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number(), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].boolean(), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"null\"]()]);\nvar jsonSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].lazy(\n  () => zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([literalSchema, zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].array(jsonSchema), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].record(jsonSchema)])\n);\nvar ToolCallSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"tool_call\"),\n  tool_type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"enum\"]([\"builtin\", \"function\"]),\n  tool_call_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  response_required: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].boolean(),\n  name: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  parameters: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string()\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\nvar ToolResponseContentSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(), jsonSchema]);\nvar ToolResponseSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"tool_response\"),\n  tool_call_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  content: ToolResponseContentSchema,\n  tool_name: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().optional(),\n  tool_type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"enum\"]([\"builtin\", \"function\"]).optional()\n});\nvar ToolErrorSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"tool_error\"),\n  tool_call_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  content: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().nullish(),\n  error: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  code: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  level: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string()\n});\n\n// src/models/user-interruption-message.ts\n\n\n// src/models/time-slice.ts\n\nvar TimeSliceSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  begin: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  end: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n});\n\n// src/models/user-interruption-message.ts\nvar UserInterruptionMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"user_interruption\"),\n  time: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([TimeSliceSchema, zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number(), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"null\"]()]).catch(null)\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/user-message.ts\n\nvar UserTranscriptMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"user_message\"),\n  message: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    role: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"user\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string()\n  }),\n  models: TranscriptModelsSchema,\n  from_text: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].boolean().nullish().catch(false)\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/json-message.ts\nvar JSONMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([\n  AudioOutputMessageSchema,\n  AssistantEndMessageSchema,\n  UserInterruptionMessageSchema,\n  UserTranscriptMessageSchema,\n  AssistantTranscriptMessageSchema,\n  JSONErrorMessageSchema,\n  ToolCallSchema,\n  ToolErrorSchema,\n  ToolResponseSchema,\n  ChatMetadataMessageSchema\n]);\n\n// src/utils/safeJson.ts\nvar safeJson = (input) => {\n  try {\n    return { success: true, data: JSON.parse(input) };\n  } catch (e) {\n    return { success: false };\n  }\n};\n\n// src/utils/unwrapJson.ts\nvar unwrapJson = (input, schema) => {\n  const json = safeJson(input);\n  if (!json.success) {\n    return null;\n  }\n  const message = schema.safeParse(json.data);\n  if (!message.success) {\n    return null;\n  }\n  return message.data;\n};\n\n// src/lib/message.ts\nvar parseMessageData = async (data) => {\n  if (data instanceof Blob) {\n    const message = await parseAudioMessage(data);\n    if (message) {\n      return {\n        success: true,\n        message\n      };\n    } else {\n      return {\n        success: false,\n        error: new SocketFailedToParseMessageError(\n          `Received blob was unable to be converted to ArrayBuffer.`\n        )\n      };\n    }\n  }\n  if (typeof data !== \"string\") {\n    return {\n      success: false,\n      error: new SocketFailedToParseMessageError(\n        `Expected a string but received ${typeof data}.`\n      )\n    };\n  }\n  const obj = unwrapJson(data, JSONMessageSchema);\n  if (obj === null) {\n    return {\n      success: false,\n      error: new SocketUnknownMessageError(\n        `Received JSON was not a known message type.`\n      )\n    };\n  }\n  return {\n    success: true,\n    message: obj\n  };\n};\nvar parseMessageType = async (event) => {\n  const data = event.data;\n  return parseMessageData(data);\n};\n\n// src/lib/client.ts\nvar VoiceClient = class _VoiceClient {\n  socket;\n  url;\n  eventHandlers = {};\n  constructor(config) {\n    this.url = createSocketUrl(config);\n    this.socket = new reconnecting_websocket__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.url, [], {\n      startClosed: true,\n      maxRetries: config.reconnectAttempts,\n      debug: config.debug\n    });\n  }\n  /**\n   * @name create\n   * @description\n   * Create a new VoiceClient.\n   * @param config - The configuration for the client.\n   * @returns\n   * A new VoiceClient instance.\n   * @example\n   * ```ts\n   * const client = VoiceClient.create(config);\n   * ```\n   */\n  static create(config) {\n    return new _VoiceClient(config);\n  }\n  /**\n   * @name on\n   * @description\n   * Attach events to the client.\n   * @param event - The event to attach to.\n   * @param callback - The callback to run when the event is triggered.\n   * @returns\n   * The VoiceClient instance.\n   * @example\n   * ```ts\n   * const client = VoiceClient.create(config);\n   * client.on('open', () => {\n   *  console.log('Socket opened');\n   * });\n   * ```\n   */\n  on(event, callback) {\n    this.eventHandlers[event] = callback;\n  }\n  handleOpen = () => {\n    this.eventHandlers.open?.();\n  };\n  handleMessage = (event) => {\n    void parseMessageType(event).then((result) => {\n      if (result.success) {\n        this.eventHandlers.message?.(result.message);\n      }\n    });\n  };\n  handleClose = (event) => {\n    this.eventHandlers.close?.(event);\n  };\n  handleError = (e) => {\n    const message = e.message ?? \"WebSocket error\";\n    this.eventHandlers.error?.(new Error(message));\n  };\n  /**\n   * @name connect\n   * @description\n   * Connect to the websocket.\n   */\n  connect() {\n    this.socket.reconnect();\n    this.socket.addEventListener(\"open\", this.handleOpen);\n    this.socket.addEventListener(\"message\", this.handleMessage);\n    this.socket.addEventListener(\"close\", this.handleClose);\n    this.socket.addEventListener(\"error\", this.handleError);\n    return this;\n  }\n  /**\n   * @name disconnect\n   * @description\n   * Disconnect from the websocket.\n   */\n  disconnect() {\n    this.socket?.close();\n    this.handleClose({ code: 1e3 });\n    this.socket.removeEventListener(\"open\", this.handleOpen);\n    this.socket.removeEventListener(\"message\", this.handleMessage);\n    this.socket.removeEventListener(\"close\", this.handleClose);\n    this.socket.removeEventListener(\"error\", this.handleError);\n  }\n  /**\n   * @name sendAudio\n   * @description\n   * Send audio data to the websocket.\n   */\n  sendAudio(audioBuffer) {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    this.socket.send(audioBuffer);\n  }\n  /**\n   * @name sendUserInput\n   * @description\n   * Send text data to the websocket.\n   */\n  sendUserInput(text) {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const json = JSON.stringify({ text, type: \"user_input\" });\n    this.socket.send(json);\n  }\n  /**\n   * @name sendAssistantInput\n   * @description\n   * Send text data to the websocket for TTS.\n   */\n  sendAssistantInput(text) {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const json = JSON.stringify({ text, type: \"assistant_input\" });\n    this.socket.send(json);\n  }\n  /**\n   * @name sendSessionSettings\n   * @description\n   * Send session settings to the websocket\n   */\n  sendSessionSettings(sessionSettings) {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const snakeCaseSettings = snakecase_keys__WEBPACK_IMPORTED_MODULE_1__(sessionSettings);\n    const json = JSON.stringify({\n      ...snakeCaseSettings,\n      type: \"session_settings\"\n    });\n    this.socket.send(json);\n  }\n  /**\n   * @name sendToolMessage\n   * @description\n   * Send tool response to the websocket, e.g. for function calling\n   */\n  sendToolMessage(toolMessage) {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const json = JSON.stringify(toolMessage);\n    this.socket.send(json);\n  }\n  /**\n   * @name readyState\n   * @description\n   * The current ready state of the socket.\n   */\n  get readyState() {\n    return this.socket.readyState;\n  }\n  /**\n   * @name sendPauseAssistantMessage\n   * @description\n   * Send pause assistant message to the websocket. This pauses responses from EVI. Chat history is still saved and sent after resuming.\n   */\n  sendPauseAssistantMessage() {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const json = JSON.stringify({ type: \"pause_assistant_message\" });\n    this.socket.send(json);\n  }\n  /**\n   * @name sendResumeAssistantMessage\n   * @description\n   * Send resume assistant message to the websocket. This resumes responses from EVI. Chat history sent while paused will now be sent.\n   */\n  sendResumeAssistantMessage() {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const json = JSON.stringify({ type: \"resume_assistant_message\" });\n    this.socket.send(json);\n  }\n};\n\n// src/lib/create-socket-config.ts\n\n\n// src/models/auth.ts\n\nvar AuthStrategySchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([\n  zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"apiKey\"),\n    value: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string({\n      description: \"API key for the Hume API is required\"\n    })\n  }),\n  zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"accessToken\"),\n    value: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string({\n      description: \"Access token for the Hume API is required\"\n    })\n  })\n]);\n\n// src/lib/create-socket-config.ts\nvar SocketConfigSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  // Configs that are set at connection time\n  hostname: zod__WEBPACK_IMPORTED_MODULE_2__.z.string({\n    description: \"Hostname of the Hume API.\"\n  }),\n  reconnectAttempts: zod__WEBPACK_IMPORTED_MODULE_2__.z.number({\n    description: \"Number of times to attempt to reconnect to the API.\"\n  }).optional().default(30),\n  debug: zod__WEBPACK_IMPORTED_MODULE_2__.z.boolean({\n    description: \"Enable debug mode.\"\n  }).optional().default(false),\n  // Configs that are set as query params\n  auth: AuthStrategySchema,\n  configId: zod__WEBPACK_IMPORTED_MODULE_2__.z.string({\n    description: \"The ID of the configuration to use.\"\n  }).optional(),\n  configVersion: zod__WEBPACK_IMPORTED_MODULE_2__.z.number({\n    description: \"The version of the configuration to use.\"\n  }).optional(),\n  resumedChatGroupId: zod__WEBPACK_IMPORTED_MODULE_2__.z.string({\n    description: \"The ID of the chat group to resume.\"\n  }).optional()\n});\nvar defaultConfig = {\n  hostname: \"api.hume.ai\",\n  reconnectAttempts: 30,\n  debug: false\n};\nvar createSocketConfig = (config) => {\n  if (!config.auth)\n    throw new Error(\"Auth strategy is required.\");\n  return SocketConfigSchema.parse({\n    ...defaultConfig,\n    ...config,\n    auth: config.auth\n  });\n};\n\n// src/lib/tts.ts\nvar TTSService = /* @__PURE__ */ ((TTSService2) => {\n  TTSService2[\"DEFAULT\"] = \"hume_ai\";\n  TTSService2[\"ELEVEN_LABS\"] = \"eleven_labs\";\n  TTSService2[\"PLAY_HT\"] = \"play_ht\";\n  return TTSService2;\n})(TTSService || {});\n\n// src/lib/microphone.ts\nvar getAudioStream = async () => {\n  return navigator.mediaDevices.getUserMedia({\n    audio: {\n      echoCancellation: true,\n      noiseSuppression: true,\n      autoGainControl: true\n    },\n    video: false\n  });\n};\nvar checkForAudioTracks = (stream) => {\n  const tracks = stream.getAudioTracks();\n  if (tracks.length === 0) {\n    throw new Error(\"No audio tracks\");\n  }\n  if (tracks.length > 1) {\n    throw new Error(\"Multiple audio tracks\");\n  }\n  const track = tracks[0];\n  if (!track) {\n    throw new Error(\"No audio track\");\n  }\n};\n\n// src/lib/fetch-access-token.ts\nfunction base64Encode(str) {\n  if (typeof Buffer === \"function\") {\n    return Buffer.from(str).toString(\"base64\");\n  } else if (typeof btoa === \"function\") {\n    return btoa(str);\n  } else {\n    throw new Error(\n      \"Base64 encoding is not natively supported in this environment.\"\n    );\n  }\n}\nvar fetchAccessToken = async (args) => {\n  const { apiKey, secretKey, host = \"api.hume.ai\" } = args;\n  const authString = `${apiKey}:${secretKey}`;\n  const encoded = base64Encode(authString);\n  const res = await fetch(`https://${host}/oauth2-cc/token`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${encoded}`\n    },\n    body: new URLSearchParams({\n      grant_type: \"client_credentials\"\n    }).toString(),\n    cache: \"no-cache\"\n  });\n  const data = await res.json();\n  const accessToken = String(data[\"access_token\"]);\n  return accessToken;\n};\n\n// src/models/session-settings.ts\n\nvar Channels = /* @__PURE__ */ ((Channels2) => {\n  Channels2[Channels2[\"MONO\"] = 1] = \"MONO\";\n  Channels2[Channels2[\"STEREO\"] = 2] = \"STEREO\";\n  return Channels2;\n})(Channels || {});\nvar AudioEncoding = /* @__PURE__ */ ((AudioEncoding2) => {\n  AudioEncoding2[\"LINEAR16\"] = \"linear16\";\n  AudioEncoding2[\"OPUS\"] = \"opus\";\n  return AudioEncoding2;\n})(AudioEncoding || {});\nvar AudioConfigurationSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  channels: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].nativeEnum(Channels, {\n    description: \"Number of channels in the input audio.\"\n  }),\n  encoding: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].nativeEnum(AudioEncoding, {\n    description: \"Encoding of the input audio.\"\n  }),\n  sampleRate: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number({\n    description: \"Sample rate of the input audio.\"\n  })\n});\nvar ContextConfigurationSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  text: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"enum\"]([\"editable\", \"persistent\", \"temporary\"]).optional()\n});\nvar WebSearchToolSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  name: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"web_search\"),\n  fallback_content: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().nullish().catch(null)\n});\nvar SessionSettingsSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  audio: AudioConfigurationSchema.optional(),\n  context: ContextConfigurationSchema.optional(),\n  languageModelApiKey: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().optional(),\n  customSessionId: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().optional(),\n  systemPrompt: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().optional(),\n  builtin_tools: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].array(zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([WebSearchToolSchema, zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"null\"]()])).optional()\n});\n\n// src/models/llm.ts\nvar LanguageModelOption = /* @__PURE__ */ ((LanguageModelOption2) => {\n  LanguageModelOption2[\"CLAUDE_3_OPUS\"] = \"CLAUDE_3_OPUS\";\n  LanguageModelOption2[\"CLAUDE_3_SONNET\"] = \"CLAUDE_3_SONNET\";\n  LanguageModelOption2[\"CLAUDE_3_HAIKU\"] = \"CLAUDE_3_HAIKU\";\n  LanguageModelOption2[\"CLAUDE_21\"] = \"CLAUDE_21\";\n  LanguageModelOption2[\"CLAUDE_INSTANT_12\"] = \"CLAUDE_INSTANT_12\";\n  LanguageModelOption2[\"GPT_4_TURBO_PREVIEW\"] = \"GPT_4_TURBO_PREVIEW\";\n  LanguageModelOption2[\"GPT_35_TURBO_0125\"] = \"GPT_35_TURBO_0125\";\n  LanguageModelOption2[\"GPT_35_TURBO\"] = \"GPT_35_TURBO\";\n  LanguageModelOption2[\"FIREWORKS_MIXTRAL_8X7B\"] = \"FIREWORKS_MIXTRAL_8X7B\";\n  return LanguageModelOption2;\n})(LanguageModelOption || {});\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@humeai/voice/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@humeai/voice/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@humeai/voice/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistantEndMessageSchema: () => (/* binding */ AssistantEndMessageSchema),\n/* harmony export */   AssistantTranscriptMessageSchema: () => (/* binding */ AssistantTranscriptMessageSchema),\n/* harmony export */   AudioEncoding: () => (/* binding */ AudioEncoding),\n/* harmony export */   AudioMessageSchema: () => (/* binding */ AudioMessageSchema),\n/* harmony export */   AudioOutputMessageSchema: () => (/* binding */ AudioOutputMessageSchema),\n/* harmony export */   AuthStrategySchema: () => (/* binding */ AuthStrategySchema),\n/* harmony export */   Channels: () => (/* binding */ Channels),\n/* harmony export */   ChatMetadataMessageSchema: () => (/* binding */ ChatMetadataMessageSchema),\n/* harmony export */   EmotionScoresSchema: () => (/* binding */ EmotionScoresSchema),\n/* harmony export */   JSONErrorMessageSchema: () => (/* binding */ JSONErrorMessageSchema),\n/* harmony export */   JSONMessageSchema: () => (/* binding */ JSONMessageSchema),\n/* harmony export */   LanguageModelOption: () => (/* binding */ LanguageModelOption),\n/* harmony export */   MimeType: () => (/* binding */ MimeType),\n/* harmony export */   SessionSettingsSchema: () => (/* binding */ SessionSettingsSchema),\n/* harmony export */   SocketConfigSchema: () => (/* binding */ SocketConfigSchema),\n/* harmony export */   SocketFailedToParseMessageError: () => (/* binding */ SocketFailedToParseMessageError),\n/* harmony export */   SocketUnknownMessageError: () => (/* binding */ SocketUnknownMessageError),\n/* harmony export */   TTSService: () => (/* binding */ TTSService),\n/* harmony export */   TimeSliceSchema: () => (/* binding */ TimeSliceSchema),\n/* harmony export */   ToolCallSchema: () => (/* binding */ ToolCallSchema),\n/* harmony export */   ToolErrorSchema: () => (/* binding */ ToolErrorSchema),\n/* harmony export */   ToolResponseContentSchema: () => (/* binding */ ToolResponseContentSchema),\n/* harmony export */   ToolResponseSchema: () => (/* binding */ ToolResponseSchema),\n/* harmony export */   TranscriptModelsSchema: () => (/* binding */ TranscriptModelsSchema),\n/* harmony export */   UserInterruptionMessageSchema: () => (/* binding */ UserInterruptionMessageSchema),\n/* harmony export */   UserTranscriptMessageSchema: () => (/* binding */ UserTranscriptMessageSchema),\n/* harmony export */   VoiceClient: () => (/* binding */ VoiceClient),\n/* harmony export */   WebSearchToolSchema: () => (/* binding */ WebSearchToolSchema),\n/* harmony export */   arrayBufferToBlob: () => (/* binding */ arrayBufferToBlob),\n/* harmony export */   base64ToBlob: () => (/* binding */ base64ToBlob),\n/* harmony export */   checkForAudioTracks: () => (/* binding */ checkForAudioTracks),\n/* harmony export */   createSocketConfig: () => (/* binding */ createSocketConfig),\n/* harmony export */   createSocketUrl: () => (/* binding */ createSocketUrl),\n/* harmony export */   defaultConfig: () => (/* binding */ defaultConfig),\n/* harmony export */   fetchAccessToken: () => (/* binding */ fetchAccessToken),\n/* harmony export */   getAudioStream: () => (/* binding */ getAudioStream),\n/* harmony export */   getSupportedMimeType: () => (/* binding */ getSupportedMimeType),\n/* harmony export */   isSocketFailedToParseMessageError: () => (/* binding */ isSocketFailedToParseMessageError),\n/* harmony export */   isSocketUnknownMessageError: () => (/* binding */ isSocketUnknownMessageError),\n/* harmony export */   parseAudioMessage: () => (/* binding */ parseAudioMessage),\n/* harmony export */   parseMessageData: () => (/* binding */ parseMessageData),\n/* harmony export */   parseMessageType: () => (/* binding */ parseMessageType)\n/* harmony export */ });\n/* harmony import */ var reconnecting_websocket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! reconnecting-websocket */ \"(rsc)/./node_modules/reconnecting-websocket/dist/reconnecting-websocket-mjs.js\");\n/* harmony import */ var snakecase_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! snakecase-keys */ \"(rsc)/./node_modules/snakecase-keys/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n// src/lib/audio.ts\nvar MimeType = /* @__PURE__ */ ((MimeType2) => {\n  MimeType2[\"WEBM\"] = \"audio/webm\";\n  MimeType2[\"MP4\"] = \"audio/mp4\";\n  MimeType2[\"WAV\"] = \"audio/wav\";\n  return MimeType2;\n})(MimeType || {});\nfunction arrayBufferToBlob(arrayBuffer, mimeType) {\n  return new Blob([arrayBuffer], { type: mimeType });\n}\nfunction base64ToBlob(base64, contentType) {\n  const binaryString = window.atob(base64);\n  const bytes = new Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  const byteArray = new Uint8Array(bytes);\n  return new Blob([byteArray], { type: contentType });\n}\nfunction getSupportedMimeType() {\n  if (typeof MediaRecorder === \"undefined\") {\n    return {\n      success: false,\n      error: new Error(\"MediaRecorder is not supported\")\n    };\n  }\n  if (MediaRecorder.isTypeSupported(\"audio/webm\" /* WEBM */)) {\n    return { success: true, mimeType: \"audio/webm\" /* WEBM */ };\n  }\n  if (MediaRecorder.isTypeSupported(\"audio/mp4\" /* MP4 */)) {\n    return { success: true, mimeType: \"audio/mp4\" /* MP4 */ };\n  }\n  if (MediaRecorder.isTypeSupported(\"audio/wav\" /* WAV */)) {\n    return { success: true, mimeType: \"audio/wav\" /* WAV */ };\n  }\n  return {\n    success: false,\n    error: new Error(\"Browser does not support any compatible mime types\")\n  };\n}\n\n// src/lib/client.ts\n\n\n\n// src/lib/create-url.ts\nvar createSocketUrl = (config) => {\n  const url = new URL(`wss://${config.hostname}`);\n  url.pathname = \"/v0/evi/chat\";\n  if (config.auth.type === \"accessToken\") {\n    url.searchParams.set(\"accessToken\", config.auth.value);\n  } else if (config.auth.type === \"apiKey\") {\n    url.searchParams.set(\"apiKey\", config.auth.value);\n  }\n  if (config.configId) {\n    url.searchParams.set(\"config_id\", config.configId);\n  }\n  if (config.configVersion) {\n    url.searchParams.set(\"config_version\", String(config.configVersion));\n  }\n  if (config.resumedChatGroupId) {\n    url.searchParams.set(\n      \"resumed_chat_group_id\",\n      String(config.resumedChatGroupId)\n    );\n  }\n  return url.href;\n};\n\n// src/lib/errors.ts\nvar SocketUnknownMessageError = class extends Error {\n  constructor(message) {\n    super(`Unknown message type.${message ? \" \" + message : \"\"}`);\n    this.name = \"SocketUnknownMessageError\";\n  }\n};\nvar isSocketUnknownMessageError = (err) => {\n  return err instanceof SocketUnknownMessageError;\n};\nvar SocketFailedToParseMessageError = class extends Error {\n  constructor(message) {\n    super(\n      `Failed to parse message from socket.${message ? \" \" + message : \"\"}`\n    );\n    this.name = \"SocketFailedToParseMessageError\";\n  }\n};\nvar isSocketFailedToParseMessageError = (err) => {\n  return err instanceof SocketFailedToParseMessageError;\n};\n\n// src/models/audio-message.ts\n\nvar AudioMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"audio\"),\n  data: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"instanceof\"](ArrayBuffer)\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\nvar parseAudioMessage = async (blob) => {\n  return blob.arrayBuffer().then((buffer) => {\n    return {\n      type: \"audio\",\n      data: buffer,\n      receivedAt: /* @__PURE__ */ new Date()\n    };\n  }).catch(() => {\n    return null;\n  });\n};\n\n// src/models/json-message.ts\n\n\n// src/models/assistant-end-message.ts\n\nvar AssistantEndMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"assistant_end\")\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/assistant-message.ts\n\n\n// src/models/transcript-models.ts\n\nvar EmotionScoresSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].record(zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number());\nvar TranscriptModelsSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  // prosody scores are null when the message is not audio\n  // (e.g. text input from the user)\n  prosody: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    scores: EmotionScoresSchema\n  }).nullish(),\n  time: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    begin: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number(),\n    end: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number()\n  }).nullish()\n});\n\n// src/models/assistant-message.ts\nvar AssistantTranscriptMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"assistant_message\"),\n  id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  message: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    role: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"assistant\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string()\n  }),\n  models: TranscriptModelsSchema,\n  from_text: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].boolean().catch(false)\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/audio-output-message.ts\n\nvar AudioOutputMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"audio_output\"),\n  id: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  data: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/chat-metadata-message.ts\n\nvar ChatMetadataMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"chat_metadata\"),\n  chat_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  chat_group_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  request_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string()\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/error-message.ts\n\nvar JSONErrorMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__.z.literal(\"error\"),\n  code: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  slug: zod__WEBPACK_IMPORTED_MODULE_2__.z.string(),\n  message: zod__WEBPACK_IMPORTED_MODULE_2__.z.string()\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/tool-messages.ts\n\nvar literalSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number(), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].boolean(), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"null\"]()]);\nvar jsonSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].lazy(\n  () => zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([literalSchema, zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].array(jsonSchema), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].record(jsonSchema)])\n);\nvar ToolCallSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"tool_call\"),\n  tool_type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"enum\"]([\"builtin\", \"function\"]),\n  tool_call_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  response_required: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].boolean(),\n  name: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  parameters: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string()\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\nvar ToolResponseContentSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(), jsonSchema]);\nvar ToolResponseSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"tool_response\"),\n  tool_call_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  content: ToolResponseContentSchema,\n  tool_name: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().optional(),\n  tool_type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"enum\"]([\"builtin\", \"function\"]).optional()\n});\nvar ToolErrorSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"tool_error\"),\n  tool_call_id: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  content: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().nullish(),\n  error: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  code: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  level: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string()\n});\n\n// src/models/user-interruption-message.ts\n\n\n// src/models/time-slice.ts\n\nvar TimeSliceSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  begin: zod__WEBPACK_IMPORTED_MODULE_2__.z.number(),\n  end: zod__WEBPACK_IMPORTED_MODULE_2__.z.number()\n});\n\n// src/models/user-interruption-message.ts\nvar UserInterruptionMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"user_interruption\"),\n  time: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([TimeSliceSchema, zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number(), zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"null\"]()]).catch(null)\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/user-message.ts\n\nvar UserTranscriptMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"user_message\"),\n  message: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    role: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"user\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string()\n  }),\n  models: TranscriptModelsSchema,\n  from_text: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].boolean().nullish().catch(false)\n}).transform((obj) => {\n  return Object.assign(obj, {\n    receivedAt: /* @__PURE__ */ new Date()\n  });\n});\n\n// src/models/json-message.ts\nvar JSONMessageSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([\n  AudioOutputMessageSchema,\n  AssistantEndMessageSchema,\n  UserInterruptionMessageSchema,\n  UserTranscriptMessageSchema,\n  AssistantTranscriptMessageSchema,\n  JSONErrorMessageSchema,\n  ToolCallSchema,\n  ToolErrorSchema,\n  ToolResponseSchema,\n  ChatMetadataMessageSchema\n]);\n\n// src/utils/safeJson.ts\nvar safeJson = (input) => {\n  try {\n    return { success: true, data: JSON.parse(input) };\n  } catch (e) {\n    return { success: false };\n  }\n};\n\n// src/utils/unwrapJson.ts\nvar unwrapJson = (input, schema) => {\n  const json = safeJson(input);\n  if (!json.success) {\n    return null;\n  }\n  const message = schema.safeParse(json.data);\n  if (!message.success) {\n    return null;\n  }\n  return message.data;\n};\n\n// src/lib/message.ts\nvar parseMessageData = async (data) => {\n  if (data instanceof Blob) {\n    const message = await parseAudioMessage(data);\n    if (message) {\n      return {\n        success: true,\n        message\n      };\n    } else {\n      return {\n        success: false,\n        error: new SocketFailedToParseMessageError(\n          `Received blob was unable to be converted to ArrayBuffer.`\n        )\n      };\n    }\n  }\n  if (typeof data !== \"string\") {\n    return {\n      success: false,\n      error: new SocketFailedToParseMessageError(\n        `Expected a string but received ${typeof data}.`\n      )\n    };\n  }\n  const obj = unwrapJson(data, JSONMessageSchema);\n  if (obj === null) {\n    return {\n      success: false,\n      error: new SocketUnknownMessageError(\n        `Received JSON was not a known message type.`\n      )\n    };\n  }\n  return {\n    success: true,\n    message: obj\n  };\n};\nvar parseMessageType = async (event) => {\n  const data = event.data;\n  return parseMessageData(data);\n};\n\n// src/lib/client.ts\nvar VoiceClient = class _VoiceClient {\n  socket;\n  url;\n  eventHandlers = {};\n  constructor(config) {\n    this.url = createSocketUrl(config);\n    this.socket = new reconnecting_websocket__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.url, [], {\n      startClosed: true,\n      maxRetries: config.reconnectAttempts,\n      debug: config.debug\n    });\n  }\n  /**\n   * @name create\n   * @description\n   * Create a new VoiceClient.\n   * @param config - The configuration for the client.\n   * @returns\n   * A new VoiceClient instance.\n   * @example\n   * ```ts\n   * const client = VoiceClient.create(config);\n   * ```\n   */\n  static create(config) {\n    return new _VoiceClient(config);\n  }\n  /**\n   * @name on\n   * @description\n   * Attach events to the client.\n   * @param event - The event to attach to.\n   * @param callback - The callback to run when the event is triggered.\n   * @returns\n   * The VoiceClient instance.\n   * @example\n   * ```ts\n   * const client = VoiceClient.create(config);\n   * client.on('open', () => {\n   *  console.log('Socket opened');\n   * });\n   * ```\n   */\n  on(event, callback) {\n    this.eventHandlers[event] = callback;\n  }\n  handleOpen = () => {\n    this.eventHandlers.open?.();\n  };\n  handleMessage = (event) => {\n    void parseMessageType(event).then((result) => {\n      if (result.success) {\n        this.eventHandlers.message?.(result.message);\n      }\n    });\n  };\n  handleClose = (event) => {\n    this.eventHandlers.close?.(event);\n  };\n  handleError = (e) => {\n    const message = e.message ?? \"WebSocket error\";\n    this.eventHandlers.error?.(new Error(message));\n  };\n  /**\n   * @name connect\n   * @description\n   * Connect to the websocket.\n   */\n  connect() {\n    this.socket.reconnect();\n    this.socket.addEventListener(\"open\", this.handleOpen);\n    this.socket.addEventListener(\"message\", this.handleMessage);\n    this.socket.addEventListener(\"close\", this.handleClose);\n    this.socket.addEventListener(\"error\", this.handleError);\n    return this;\n  }\n  /**\n   * @name disconnect\n   * @description\n   * Disconnect from the websocket.\n   */\n  disconnect() {\n    this.socket?.close();\n    this.handleClose({ code: 1e3 });\n    this.socket.removeEventListener(\"open\", this.handleOpen);\n    this.socket.removeEventListener(\"message\", this.handleMessage);\n    this.socket.removeEventListener(\"close\", this.handleClose);\n    this.socket.removeEventListener(\"error\", this.handleError);\n  }\n  /**\n   * @name sendAudio\n   * @description\n   * Send audio data to the websocket.\n   */\n  sendAudio(audioBuffer) {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    this.socket.send(audioBuffer);\n  }\n  /**\n   * @name sendUserInput\n   * @description\n   * Send text data to the websocket.\n   */\n  sendUserInput(text) {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const json = JSON.stringify({ text, type: \"user_input\" });\n    this.socket.send(json);\n  }\n  /**\n   * @name sendAssistantInput\n   * @description\n   * Send text data to the websocket for TTS.\n   */\n  sendAssistantInput(text) {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const json = JSON.stringify({ text, type: \"assistant_input\" });\n    this.socket.send(json);\n  }\n  /**\n   * @name sendSessionSettings\n   * @description\n   * Send session settings to the websocket\n   */\n  sendSessionSettings(sessionSettings) {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const snakeCaseSettings = snakecase_keys__WEBPACK_IMPORTED_MODULE_1__(sessionSettings);\n    const json = JSON.stringify({\n      ...snakeCaseSettings,\n      type: \"session_settings\"\n    });\n    this.socket.send(json);\n  }\n  /**\n   * @name sendToolMessage\n   * @description\n   * Send tool response to the websocket, e.g. for function calling\n   */\n  sendToolMessage(toolMessage) {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const json = JSON.stringify(toolMessage);\n    this.socket.send(json);\n  }\n  /**\n   * @name readyState\n   * @description\n   * The current ready state of the socket.\n   */\n  get readyState() {\n    return this.socket.readyState;\n  }\n  /**\n   * @name sendPauseAssistantMessage\n   * @description\n   * Send pause assistant message to the websocket. This pauses responses from EVI. Chat history is still saved and sent after resuming.\n   */\n  sendPauseAssistantMessage() {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const json = JSON.stringify({ type: \"pause_assistant_message\" });\n    this.socket.send(json);\n  }\n  /**\n   * @name sendResumeAssistantMessage\n   * @description\n   * Send resume assistant message to the websocket. This resumes responses from EVI. Chat history sent while paused will now be sent.\n   */\n  sendResumeAssistantMessage() {\n    if (!this.socket) {\n      throw new Error(\"Socket is not connected.\");\n    }\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error(\"Socket is not open.\");\n    }\n    const json = JSON.stringify({ type: \"resume_assistant_message\" });\n    this.socket.send(json);\n  }\n};\n\n// src/lib/create-socket-config.ts\n\n\n// src/models/auth.ts\n\nvar AuthStrategySchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([\n  zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"apiKey\"),\n    value: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string({\n      description: \"API key for the Hume API is required\"\n    })\n  }),\n  zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n    type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"accessToken\"),\n    value: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string({\n      description: \"Access token for the Hume API is required\"\n    })\n  })\n]);\n\n// src/lib/create-socket-config.ts\nvar SocketConfigSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n  // Configs that are set at connection time\n  hostname: zod__WEBPACK_IMPORTED_MODULE_2__.z.string({\n    description: \"Hostname of the Hume API.\"\n  }),\n  reconnectAttempts: zod__WEBPACK_IMPORTED_MODULE_2__.z.number({\n    description: \"Number of times to attempt to reconnect to the API.\"\n  }).optional().default(30),\n  debug: zod__WEBPACK_IMPORTED_MODULE_2__.z.boolean({\n    description: \"Enable debug mode.\"\n  }).optional().default(false),\n  // Configs that are set as query params\n  auth: AuthStrategySchema,\n  configId: zod__WEBPACK_IMPORTED_MODULE_2__.z.string({\n    description: \"The ID of the configuration to use.\"\n  }).optional(),\n  configVersion: zod__WEBPACK_IMPORTED_MODULE_2__.z.number({\n    description: \"The version of the configuration to use.\"\n  }).optional(),\n  resumedChatGroupId: zod__WEBPACK_IMPORTED_MODULE_2__.z.string({\n    description: \"The ID of the chat group to resume.\"\n  }).optional()\n});\nvar defaultConfig = {\n  hostname: \"api.hume.ai\",\n  reconnectAttempts: 30,\n  debug: false\n};\nvar createSocketConfig = (config) => {\n  if (!config.auth)\n    throw new Error(\"Auth strategy is required.\");\n  return SocketConfigSchema.parse({\n    ...defaultConfig,\n    ...config,\n    auth: config.auth\n  });\n};\n\n// src/lib/tts.ts\nvar TTSService = /* @__PURE__ */ ((TTSService2) => {\n  TTSService2[\"DEFAULT\"] = \"hume_ai\";\n  TTSService2[\"ELEVEN_LABS\"] = \"eleven_labs\";\n  TTSService2[\"PLAY_HT\"] = \"play_ht\";\n  return TTSService2;\n})(TTSService || {});\n\n// src/lib/microphone.ts\nvar getAudioStream = async () => {\n  return navigator.mediaDevices.getUserMedia({\n    audio: {\n      echoCancellation: true,\n      noiseSuppression: true,\n      autoGainControl: true\n    },\n    video: false\n  });\n};\nvar checkForAudioTracks = (stream) => {\n  const tracks = stream.getAudioTracks();\n  if (tracks.length === 0) {\n    throw new Error(\"No audio tracks\");\n  }\n  if (tracks.length > 1) {\n    throw new Error(\"Multiple audio tracks\");\n  }\n  const track = tracks[0];\n  if (!track) {\n    throw new Error(\"No audio track\");\n  }\n};\n\n// src/lib/fetch-access-token.ts\nfunction base64Encode(str) {\n  if (typeof Buffer === \"function\") {\n    return Buffer.from(str).toString(\"base64\");\n  } else if (typeof btoa === \"function\") {\n    return btoa(str);\n  } else {\n    throw new Error(\n      \"Base64 encoding is not natively supported in this environment.\"\n    );\n  }\n}\nvar fetchAccessToken = async (args) => {\n  const { apiKey, secretKey, host = \"api.hume.ai\" } = args;\n  const authString = `${apiKey}:${secretKey}`;\n  const encoded = base64Encode(authString);\n  const res = await fetch(`https://${host}/oauth2-cc/token`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${encoded}`\n    },\n    body: new URLSearchParams({\n      grant_type: \"client_credentials\"\n    }).toString(),\n    cache: \"no-cache\"\n  });\n  const data = await res.json();\n  const accessToken = String(data[\"access_token\"]);\n  return accessToken;\n};\n\n// src/models/session-settings.ts\n\nvar Channels = /* @__PURE__ */ ((Channels2) => {\n  Channels2[Channels2[\"MONO\"] = 1] = \"MONO\";\n  Channels2[Channels2[\"STEREO\"] = 2] = \"STEREO\";\n  return Channels2;\n})(Channels || {});\nvar AudioEncoding = /* @__PURE__ */ ((AudioEncoding2) => {\n  AudioEncoding2[\"LINEAR16\"] = \"linear16\";\n  AudioEncoding2[\"OPUS\"] = \"opus\";\n  return AudioEncoding2;\n})(AudioEncoding || {});\nvar AudioConfigurationSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  channels: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].nativeEnum(Channels, {\n    description: \"Number of channels in the input audio.\"\n  }),\n  encoding: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].nativeEnum(AudioEncoding, {\n    description: \"Encoding of the input audio.\"\n  }),\n  sampleRate: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].number({\n    description: \"Sample rate of the input audio.\"\n  })\n});\nvar ContextConfigurationSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  text: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string(),\n  type: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"enum\"]([\"editable\", \"persistent\", \"temporary\"]).optional()\n});\nvar WebSearchToolSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  name: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].literal(\"web_search\"),\n  fallback_content: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().nullish().catch(null)\n});\nvar SessionSettingsSchema = zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].object({\n  audio: AudioConfigurationSchema.optional(),\n  context: ContextConfigurationSchema.optional(),\n  languageModelApiKey: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().optional(),\n  customSessionId: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().optional(),\n  systemPrompt: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].string().optional(),\n  builtin_tools: zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].array(zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"].union([WebSearchToolSchema, zod__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"null\"]()])).optional()\n});\n\n// src/models/llm.ts\nvar LanguageModelOption = /* @__PURE__ */ ((LanguageModelOption2) => {\n  LanguageModelOption2[\"CLAUDE_3_OPUS\"] = \"CLAUDE_3_OPUS\";\n  LanguageModelOption2[\"CLAUDE_3_SONNET\"] = \"CLAUDE_3_SONNET\";\n  LanguageModelOption2[\"CLAUDE_3_HAIKU\"] = \"CLAUDE_3_HAIKU\";\n  LanguageModelOption2[\"CLAUDE_21\"] = \"CLAUDE_21\";\n  LanguageModelOption2[\"CLAUDE_INSTANT_12\"] = \"CLAUDE_INSTANT_12\";\n  LanguageModelOption2[\"GPT_4_TURBO_PREVIEW\"] = \"GPT_4_TURBO_PREVIEW\";\n  LanguageModelOption2[\"GPT_35_TURBO_0125\"] = \"GPT_35_TURBO_0125\";\n  LanguageModelOption2[\"GPT_35_TURBO\"] = \"GPT_35_TURBO\";\n  LanguageModelOption2[\"FIREWORKS_MIXTRAL_8X7B\"] = \"FIREWORKS_MIXTRAL_8X7B\";\n  return LanguageModelOption2;\n})(LanguageModelOption || {});\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@humeai/voice/dist/index.mjs\n");

/***/ })

};
;